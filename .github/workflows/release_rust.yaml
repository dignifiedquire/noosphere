on:
  push:
    branches:
      - main

name: 'Perform a release'

jobs:
  # NOTE: This step is stateful. When there are unreleased changes on main, it
  # generates a candidate PR for the next release based on all the unreleased
  # changes and their implications for the versions of our packages. If such a
  # PR already exists, it will detect it and update in place. These PRs are
  # intended to stick around and update until a release is ready to be made.
  # Once merged, this step will detect the merge and generate Git tags and
  # corresponding Github releases for each package being released. Only at that
  # time will the rest of the steps in this workflow run.
  release-please:
    name: 'Prepare a release'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.repository_owner == 'cdata'
    outputs:
      noosphere_cli_released: ${{ steps.release.outputs['rust/noosphere-cli--release_created'] }}
      noosphere_cli_release_tag_name: ${{ steps.release.outputs['rust/noosphere-cli--tag_name'] }}
      noosphere_released: ${{ steps.release.outputs['rust/noosphere--release_created'] }}
      noosphere_release_tag_name: ${{ steps.release.outputs['rust/noosphere--tag_name'] }}
      anything_was_released:
        ${{ steps.release.outputs['rust/noosphere--release_created'] ||
        steps.release.outputs['rust/noosphere-api--release_created'] ||
        steps.release.outputs['rust/noosphere-cli--release_created'] ||
        steps.release.outputs['rust/noosphere-collections--release_created'] ||
        steps.release.outputs['rust/noosphere-core--release_created'] ||
        steps.release.outputs['rust/noosphere-fs--release_created'] ||
        steps.release.outputs['rust/noosphere-into--release_created'] ||
        steps.release.outputs['rust/noosphere-ns--release_created'] ||
        steps.release.outputs['rust/noosphere-storage--release_created'] }}
    steps:
      - uses: chainguard-dev/actions/setup-gitsign@main
      - name: 'Run release-please'
        id: release
        uses: cdata/release-please-action@main
        with:
          config-file: rust/release-please-config.json
          manifest-file: rust/.release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}
          default-branch: main
          command: manifest
          release-type: rust
          extra-files: |
            Cargo.toml

  noosphere-cli-build:
    needs: ['release-please']
    if: ${{ needs['release-please'].outputs.noosphere_cli_released }}
    uses: ./.github/workflows/noosphere_cli_build.yaml

  noosphere-cli-release-artifacts:
    name: 'Add Noosphere CLI artifacts to release'
    needs: ['release-please', 'noosphere-cli-build']
    runs-on: ubuntu-latest
    steps:
      - name: 'Download build artifacts'
        uses: actions/download-artifact@v3

      - name: 'Generate checksums'
        run: for file in orb-*/orb-*; do openssl dgst -sha256 -r "$file" | awk '{print $1}' > "${file}.sha256"; done

      # NOTE: The release has to be published before adding build artifacts,
      # otherwise the upload causes a different release to be made (???)
      - name: 'Publish release'
        run: gh release edit ${{ needs['release-please'].outputs.noosphere_cli_release_tag_name }} --draft=false --repo=cdata/noosphere
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Add build artifacts to release'
        uses: softprops/action-gh-release@v1
        with:
          files: orb-*/orb-*
          tag_name: ${{ needs['release-please'].outputs.noosphere_cli_release_tag_name }}

  noosphere-apple-build:
    name: 'Build Noosphere artifacts (Apple)'
    needs: ['release-please']
    if: ${{ needs['release-please'].outputs.noosphere_released }}
    uses: ./.github/workflows/noosphere_apple_build.yaml

  noosphere-release-artifacts:
    name: 'Add Noosphere artifacts to release'
    needs: ['release-please', 'noosphere-apple-build']
    runs-on: ubuntu-latest
    steps:
      - name: 'Download XCode Framework artifact'
        uses: actions/download-artifact@v3
        with:
          name: libnoosphere_apple_framework

      - name: 'Generate checksum'
        run: openssl dgst -sha256 ./libnoosphere-apple-xcframework.zip > ./libnoosphere-apple-xcframework.zip.sha256

      # NOTE: The release has to be published before adding build artifacts,
      # otherwise the upload causes a different release to be made (???)
      - name: 'Publish release'
        run: gh release edit ${{ needs['release-please'].outputs.noosphere_release_tag_name }} --draft=false --repo=cdata/noosphere
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Add build artifacts to release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            libnoosphere-apple-xcframework.zip
            libnoosphere-apple-xcframework.zip.sha256
          tag_name: ${{ needs['release-please'].outputs.noosphere_release_tag_name }}

  update-swift-noosphere-binary-target:
    name: 'Update SwiftNoosphere binary target'
    needs: ['release-please', 'noosphere-release-artifacts']
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: 'Download XCode Framework artifact'
        uses: actions/download-artifact@v3
        with:
          name: libnoosphere_apple_framework

      - name: 'Generate checksum'
        id: generate-checksum
        run: |
          CHECKSUM=`openssl dgst -r -sha256 ./libnoosphere-apple-xcframework.zip | cut -d " " -f 1`
          echo "checksum=\"$CHECKSUM\"" >> $GITHUB_OUTPUT
      - name: 'Modify Package.swift'
        run: |
          URL="https://github.com/subconsciousnetwork/noosphere/releases/download/${{ needs.release-please.outputs.noosphere_release_tag_name }}/libnoosphere-apple-xcframework.zip"

          sed -i -e "s#url: \"[^\"]*\",#url: \"$URL\",#" ./Package.swift
          sed -i -e "s#checksum: \"[^\"]*\"),#checksum: \"${{ steps.generate-checksum.checksum }}\"),#" ./Package.swift
      # TODO(#135): Evaluate if we want to automatically check this change in
      # and push it to the project repository
      - uses: actions/upload-artifact@v3
        with:
          name: swift-package-manifest
          path: ./Package.swift

  update-typescript-noosphere-version:
    name: 'Update TypeScript Noosphere version'
    needs: ['release-please']
    if: ${{ needs['release-please'].outputs.noosphere_released }}
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   pull-requests: write
    #   contents: write
    steps:
      - uses: actions/checkout@v3
      # - uses: chainguard-dev/actions/setup-gitsign@main
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install jq

          curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel

          # cargo install cargo-quickinstall
          # cargo quickinstall toml-cli
      - name: Import Subconscious Ops GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.CDATA_GPG_KEY }}
          passphrase: ${{ secrets.CDATA_GPG_PASSWORD }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: 'Update TypeScript Noosphere version'
        id: update-noosphere-version
        run: |
          export NOOSPHERE_METADATA_FILE="./typescript/packages/orb/.noosphere_metadata.json"
          export CURRENT_VERSION=`jq .version $NOOSPHERE_METADATA_FILE | xargs echo`
          export LATEST_VERSION=`./dasel -f ./rust/noosphere/Cargo.toml .package.version | xargs echo`
          export COMMIT_PREFIX=`cargo run --package noosphere --example version_diff -- --left $CURRENT_VERSION --right $LATEST_VERSION`

          if [ $COMMIT_PREFIX = "ERROR" ]; then
            exit 1
          else
            echo "$( jq --arg VERSION $LATEST_VERSION '.version = $VERSION' $NOOSPHERE_METADATA_FILE )" > $NOOSPHERE_METADATA_FILE
            echo "commit-prefix=$COMMIT_PREFIX" >> $GITHUB_OUTPUT
            echo "noosphere-version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi
      - name: 'Create PR for updated file'
        uses: peter-evans/create-pull-request@v4.0.2
        with:
          committer: ${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>
          # author: ${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>
          token: ${{ secrets.CDATA_GITHUB_TOKEN }}
          commit-message: '${{ steps.update-noosphere-version.outputs.commit-prefix }} Update `noosphere` version to ${{ steps.update-noosphere-version.outputs.noosphere-version }}'
          title: '${{ steps.update-noosphere-version.outputs.commit-prefix }} Update `noosphere` version to ${{ steps.update-noosphere-version.outputs.noosphere-version }} for TypeScript packages'
          body: >
            :robot: I have updated a cross-workspace dependency *beep* *boop*
            ---

            This PR was generated automatically in response to the release of the Rust `noosphere` crate.


            This change updates the release version of the `noosphere` crate that is associated with a pending release of our TypeScript/NPM packages.


            You should make a call to land this PR (or defer it) __before__ performing a release of any TypeScript/NPM packages, as it weighs in the balance when considering how to increment the versions of those packages.


            **NOTE:** the commit message for this change has been specifically chosen to reflect the severity of changes in the Rust dependency, so make sure to preserve it when merging this PR!

  # Publishes crates to crates.io in dependency order. This command is
  # idempotent and won't re-publish crates that are already published, so it's
  # safe for us to run it indiscriminately
  publish-crates:
    name: 'Publish to crates.io'
    needs: ['release-please']
    runs-on: ubuntu-latest
    if: ${{ needs['release-please'].outputs.anything_was_released }}
    steps:
      - uses: actions/checkout@v3
      - uses: Swatinem/rust-cache@v2
      - uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable
      - name: 'Install environment packages'
        run: |
          sudo apt-get update -qqy
          sudo apt-get install protobuf-compiler cmake libssl-dev pkg-config
      - name: 'Install cargo-workspaces'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --force cargo-workspaces
      - name: 'Publish crates'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo workspaces publish --from-git
